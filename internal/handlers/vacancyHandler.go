package handlers

import (
	"cmd/app/bot.go/internal/domain"
	"cmd/app/bot.go/internal/service"
	"fmt"
	"log"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func GetAllVacancyHandler(bot *tgbotapi.BotAPI, vs *service.VacancyService, request domain.User) {
	allVacancy := vs.ParsPage()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∞–∫–∞–Ω—Å–∏–∏
	if len(allVacancy) == 0 {
		responseMessage := "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
		msg := tgbotapi.NewMessage(request.ChatId, responseMessage)
		_, err := bot.Send(msg)
		if err != nil {
			log.Printf("Error sending message: %v", err)
		}
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	responseMessage := "–ì–æ—Ä—è—á–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ üî•üî•üî•\n\n"
	for _, vacancy := range allVacancy {
		responseMessage += fmt.Sprintf(
			"%s\n%s\n%s\n\n",
			vacancy.Name, vacancy.Description, vacancy.Link,
		)
	}

	// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç–∞ Telegram (4096 —Å–∏–º–≤–æ–ª–æ–≤)
	if len(responseMessage) > 4096 {
		responseMessage = responseMessage[:4093] + "..."
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	msg := tgbotapi.NewMessage(request.ChatId, responseMessage)
	_, err := bot.Send(msg)
	if err != nil {
		log.Printf("Error sending message: %v", err)
	}
}

func WelcomeMessageHandler(bot *tgbotapi.BotAPI, vs *service.VacancyService, request domain.User) {
    if err := vs.SaveUser(request); err != nil {
        log.Printf("Error saving user: %v", err)
    }

    vs.ParsPage()

    // if len(vs.Vacancies) == 0 {
    //     responseMessage := "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    //     msg := tgbotapi.NewMessage(request.ChatId, responseMessage)
    //     _, err := bot.Send(msg)
    //     if err != nil {
    //         log.Printf("Error sending message: %v", err)
    //     }
    //     return
    // }

    responseMessage := "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –∫–∞–∫ –ø–æ—è–≤–∏—Ç—Å—è –Ω–æ–≤–∞—è üî•–ì–û–†–Ø–ß–ê–Ø –≤–∞–∫–∞–Ω—Å–∏—è, —Ç—ã —É–∑–Ω–∞–µ—à—å –æ–¥–∏–Ω –∏–∑ –ø–µ—Ä–≤—ã—Ö\n\n–ê –ø–æ–∫–∞ –º–æ–∂–µ—à—å –æ—Ç–¥—ã—Ö–∞—Ç—å —è —Å–¥–µ–ª–∞—é –≤—Å–µ —Å–∞–º!"

    replyKeyboard := tgbotapi.NewReplyKeyboard(
        tgbotapi.NewKeyboardButtonRow(
            tgbotapi.NewKeyboardButton("–í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏"),
            tgbotapi.NewKeyboardButton("–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
        ),
    )

    msg := tgbotapi.NewMessage(request.ChatId, responseMessage)
    msg.ReplyMarkup = replyKeyboard

    if _, err := bot.Send(msg); err != nil {
        log.Printf("Error sending message: %v", err)
    }
}


func StartVacancyChecker(bot *tgbotapi.BotAPI, vs *service.VacancyService) {
    initialVacancies := vs.ParsPage()
    vs.UpdateVacancies(initialVacancies)

    go func() {
        for {
            newVacancies := vs.ParsPage()
            diff := vs.GetNewVacancies(newVacancies)

            if len(diff) > 0 {
                users, err := vs.GetAllUsers()
                if err != nil {
                    log.Printf("Failed to get users: %v", err)
                    continue
                }

                for _, user := range users {
                    if user.Notification {
                        for _, vacancy := range diff {
                            message := fmt.Sprintf(
                                "üî• –ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è!\n\n%s\n%s\n%s\n",
                                vacancy.Name, vacancy.Description, vacancy.Link,
                            )
                            msg := tgbotapi.NewMessage(user.ChatId, message)
                            _, err := bot.Send(msg)
                            if err != nil {
                                log.Printf("Failed to send message to user %s: %v", user.UserName, err)
                            }
                        }
                    }
                }

                vs.UpdateVacancies(newVacancies)
            }
            time.Sleep(600 * time.Second) // –ñ–¥–µ–º 10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        }
    }()
}


func OffUserNotifications(bot *tgbotapi.BotAPI, vs *service.VacancyService, request domain.User){
	if err := vs.OffNotifications(request); err != nil {
        log.Printf("Error off notifications for user: %v", err)
    }

	responseMessage := "–ë–æ–ª—å—à–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å –Ω–µ –±—É–¥—É :(\n\n–ù–æ –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –¥–∞–ª—å—à–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏ /start"

	msg := tgbotapi.NewMessage(request.ChatId, responseMessage)

    if _, err := bot.Send(msg); err != nil {
        log.Printf("Error sending message: %v", err)
    }
}


func DefaultMessagesHandler(bot *tgbotapi.BotAPI, request domain.User) {
	sticker := tgbotapi.NewSticker(request.ChatId, tgbotapi.FileID("CAACAgIAAxkBAAENQDBnS2_zZGpxdw7SwmUrGzDLcmNofwACw0IAAtAnyEqlQ3xNhpVNmTYE"))
	_, err := bot.Send(sticker)
	if err != nil {
		log.Printf("Failed to send sticker: %s", err)
	}

	message := "–°–µ–π—á–∞—Å –±–æ—Ç —ç—Ç–æ –Ω–µ —É–º–µ–µ—Ç –¥–µ–ª–∞—Ç—å. –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –º–Ω–µ –≤ –ª–∏—á–∫—É @khilikegor"
	msg := tgbotapi.NewMessage(request.ChatId, message)
	_, err = bot.Send(msg)
	if err != nil {
		log.Printf("Failed to send message: %v", err)
	}
}